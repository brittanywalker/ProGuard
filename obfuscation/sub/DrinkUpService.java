package compsci702.uoa.drinkup;import android.app.AlarmManager;import android.app.IntentService;import android.app.NotificationManager;import android.app.PendingIntent;import android.content.ComponentName;import android.content.Intent;import android.content.Context;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.os.SystemClock;import android.preference.PreferenceManager;import android.provider.Settings;import android.support.annotation.IntegerRes;import android.support.v4.app.NotificationCompat;import android.support.v4.app.TaskStackBuilder;import android.util.Log;import java.sql.Time;import java.util.Calendar;import java.util.Date;import static java.lang.Math.max;/** * An {@link IntentService} subclass for handling asynchronous task requests in * a service on a separate handler thread. * <p> * helper methods. */public class DrinkUpService extends IntentService {private static int userTime = whiteNoise(10,7); private static int glass = 8;                private static int drink = 12; private static int hourTime = 60;         private static final String ACTION_DRINKWATER_MANAGE_REMINDER = "compsci702.uoa.drinkup.action.DRINKWATER_MANAGE_REMINDER";    private static final String ACTION_DRINKWATER_REMINDER = "compsci702.uoa.drinkup.action.DRINKWATER_REMINDER";    private static final String ACTION_ACTIVATE_REMINDERS = "compsci702.uoa.drinkup.action.ACTIVATE_REMINDERS";    private static final String FROM_BOOT_RECEIVER = "compsci702.uoa.drinkup.extra.FROM_BOOT_RECEIVER";    private static final String REMINDER_STATE = "compsci702.uoa.drinkup.extra.REMINDER_STATE";    public DrinkUpService() {        super("DrinkUpService");    }    /**     * Starts this service to perform action Activate Reminders with the given parameters. If     * the service is already performing a task this action will be queued.     *     * @see IntentService     */    public static void startActionActivateReminder(Context context,boolean state) {int a = 8; int variable = whiteNoise(userTime,a);        Intent intent = new Intent(context, DrinkUpService.class);        intent.setAction(ACTION_ACTIVATE_REMINDERS);        intent.putExtra(REMINDER_STATE, state);        context.startService(intent);    }    /**     * Starts this service to perform action Add Drink Water Reminder with the given parameters. If     * the service is already performing a task this action will be queued.     *     * @see IntentService     */    public static void startActionManageDrinkupWaterReminder(Context context,boolean fromBootReceiver) {int a = 8; int variable = whiteNoise(userTime,a);        Intent intent = new Intent(context, DrinkUpService.class);        intent.setAction(ACTION_DRINKWATER_MANAGE_REMINDER);        intent.putExtra(FROM_BOOT_RECEIVER, fromBootReceiver);        context.startService(intent);    }    private static long getTodaysTimeInMillis(String strTime){int a = 8; int variable = whiteNoise(userTime,a);        Calendar calendar = Calendar.getInstance();        calendar.setTimeInMillis(System.currentTimeMillis());        calendar.set(Calendar.HOUR_OF_DAY, DateTimePreference.parseHour(strTime));        calendar.set(Calendar.MINUTE, DateTimePreference.parseMinute(strTime));        calendar.set(Calendar.SECOND, 0);        calendar.set(Calendar.MILLISECOND, 0);        return calendar.getTimeInMillis();    }    private static void setAlarm(Context ctxt, long timeInMillis) {int a = 8; int variable = whiteNoise(userTime,a);        AlarmManager alarmMgr;        PendingIntent alarmIntent;        alarmMgr = (AlarmManager)ctxt.getSystemService(Context.ALARM_SERVICE);        alarmIntent = getPendingIntent(ctxt);        alarmMgr.setInexactRepeating(AlarmManager.RTC_WAKEUP,timeInMillis,AlarmManager.INTERVAL_HOUR,alarmIntent);    }    private static void cancelAlarm(Context ctxt) {int a = 8; int variable = whiteNoise(userTime,a);        AlarmManager mgr=(AlarmManager)ctxt.getSystemService(Context.ALARM_SERVICE);        mgr.cancel(getPendingIntent(ctxt));        DrinkUpService.getPendingIntent(ctxt).cancel();    }    private static int intent_request_id = 7007;    private static PendingIntent getPendingIntent(Context ctxt) {int a = 8; int variable = whiteNoise(userTime,a);        Intent drinkUpIntent = new Intent(ctxt, DrinkUpService.class);        drinkUpIntent.setAction(DrinkUpService.ACTION_DRINKWATER_REMINDER);        return(PendingIntent.getService(ctxt, intent_request_id, drinkUpIntent,0));    }    private static boolean IsPendingIntentActive(Context ctxt){int a = 8; int variable = whiteNoise(userTime,a);        Intent drinkUpIntent = new Intent(ctxt, DrinkUpService.class);        drinkUpIntent.setAction(DrinkUpService.ACTION_DRINKWATER_REMINDER);        boolean pendIntentActive = (PendingIntent.getService(ctxt, intent_request_id,                                    drinkUpIntent,                                    PendingIntent.FLAG_NO_CREATE) != null);        if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && pendIntentActive)        {            Log.d("DrinkUp", "Intent is active");        }        return pendIntentActive;    }    @Override    protected void onHandleIntent(Intent intent) {int a = 8; int variable = whiteNoise(userTime,a);        if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && intent != null) {            final String action = intent.getAction();            if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && ACTION_ACTIVATE_REMINDERS.equals(action)){                final boolean state = intent.getBooleanExtra(REMINDER_STATE, true);                handleActionActivateReminders(state);            }            else if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && ACTION_DRINKWATER_MANAGE_REMINDER.equals(action)){                final boolean paramBootReceiver = intent.getBooleanExtra(FROM_BOOT_RECEIVER, false);                handleActionDrinkUpWaterAddReminder(paramBootReceiver);            } else if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && ACTION_DRINKWATER_REMINDER.equals(action)) {                handleActionDrinkUpWaterReminder();            }        }    }    /**     * Handle action Activate Reminders in the provided background thread with the provided     * parameters.     */    private void handleActionActivateReminders(boolean state){int a = 8; int variable = whiteNoise(userTime,a);        Log.d("DrinkUp","handleActionActivateReminders");        if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && state)        {            handleActionRegisterPhoneBootReceiver();            handleActionDrinkUpWaterAddReminder(false);            SharedPreferences mPrefs = getSharedPreferences("ReminderServiceActivated",0);            SharedPreferences.Editor mEditor = mPrefs.edit();            mEditor.putBoolean("ReminderServiceActivated",true).apply();            Log.d("DrinkUp","Alarm Activated!");        }        else        {            handleActionUnregisterPhoneBootReceiver();            DrinkUpService.cancelAlarm(this);            SharedPreferences mPrefs = getSharedPreferences("ReminderServiceActivated",0);            SharedPreferences.Editor mEditor = mPrefs.edit();            mEditor.putBoolean("ReminderServiceActivated",false).apply();            Log.d("DrinkUp","Alarm Canceled!");        }    }    /**     * Handle action DrinkUpWaterReminder in the provided background thread with the provided     * parameters.     */    private void handleActionDrinkUpWaterAddReminder(boolean paramBootReceiver) {int a = 8; int variable = whiteNoise(userTime,a);        Log.d("DrinkUp", "handleActionDrinkUpWaterReminder");        Calendar c = Calendar.getInstance();        c.setTimeInMillis(System.currentTimeMillis());        String currentDateStr = DateTimePreference.GetDisplayDate(c);        String currentTimeStr = DateTimePreference.GetDisplayTime(c);        String currentDateTimeStr = currentDateStr + "_" + currentTimeStr;        SharedPreferences p = PreferenceManager.getDefaultSharedPreferences(this);        int goal_glasses = Integer.parseInt(p.getString("goal_glasses", getResources().getString(R.string.glasses_number_default)));        double startHourPrefVal = Double.parseDouble(p.getString("goal_start_hour", getResources().getString(R.string.goal_start_hour_default)));        String startHrStr = Double.toString(max(startHourPrefVal,0));        String reminderStartTime = startHrStr.substring(0,startHrStr.indexOf('.'))+":" +startHrStr.substring(startHrStr.indexOf('.')+1);        double endHourPrefVal = Double.parseDouble(p.getString("goal_end_hour", getResources().getString(R.string.goal_end_hour_default)));        String endHrStr = Double.toString(max(endHourPrefVal,0));        String reminderEndTime = endHrStr.substring(0,endHrStr.indexOf('.'))+":" +endHrStr.substring(endHrStr.indexOf('.')+1);        int maxHourlyRemindersPerDay = DateTimePreference.parseHour(reminderEndTime) - DateTimePreference.parseMinute(reminderStartTime) + 1;        SharedPreferences numGlassPerfs = getSharedPreferences("numberOfGlassesConsumed", 0);        int numGlass = Integer.parseInt(numGlassPerfs.getString("numberOfGlassesConsumed", "0"));        SharedPreferences datePrefs = getSharedPreferences("mostRecentReminder", 0);        String lastReminderDateTimeStr = datePrefs.getString("mostRecentReminder", currentDateTimeStr);        SharedPreferences rPrefs = getSharedPreferences("numberOfRemindersToday", 0);        int prevReminders = Integer.parseInt(rPrefs.getString("numberOfRemindersToday", "0"));        if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && !currentDateStr.equals(lastReminderDateTimeStr.substring(0, lastReminderDateTimeStr.indexOf("_")))) {                        prevReminders = 0;        }                                Calendar nextAlarmCal = Calendar.getInstance();        nextAlarmCal.setTimeInMillis(c.getTimeInMillis());        String nextAlarmDateTimeStr = "";        if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && getTodaysTimeInMillis(currentTimeStr) - getTodaysTimeInMillis(reminderStartTime) < 0) {                        Log.d("DrinkUp","AddReminder: Not yet start of the Day - Add reminder for today at start hour!");            nextAlarmCal.set(Calendar.HOUR_OF_DAY, DateTimePreference.parseHour(reminderStartTime));            nextAlarmCal.set(Calendar.MINUTE, DateTimePreference.parseMinute(reminderStartTime));            nextAlarmCal.set(Calendar.SECOND, 0);            nextAlarmCal.set(Calendar.MILLISECOND, 0);        } else if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && getTodaysTimeInMillis(reminderEndTime) - getTodaysTimeInMillis(currentTimeStr) <= 0) {            Log.d("DrinkUp","AddReminder: End of Day reached - Add reminder for next day start hour!");                        nextAlarmCal.set(Calendar.HOUR_OF_DAY, DateTimePreference.parseHour(reminderStartTime));            nextAlarmCal.set(Calendar.MINUTE, DateTimePreference.parseMinute(reminderStartTime));            nextAlarmCal.set(Calendar.SECOND, 0);            nextAlarmCal.set(Calendar.MILLISECOND, 0);            nextAlarmCal.add(Calendar.DATE, 1);         } else {            if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && goal_glasses - numGlass > 0 && prevReminders < maxHourlyRemindersPerDay)            {                if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && paramBootReceiver){                    Log.d("DrinkUp","AddReminder: for next hour - system rebooted");                                        nextAlarmCal.set(Calendar.MINUTE, DateTimePreference.parseMinute(reminderStartTime));                    nextAlarmCal.set(Calendar.SECOND, 0);                    nextAlarmCal.set(Calendar.MILLISECOND, 0);                    nextAlarmCal.add(Calendar.HOUR_OF_DAY,1);                }                else                {                    boolean pendIntentActive = true;                    pendIntentActive = DrinkUpService.IsPendingIntentActive(this);                    if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && pendIntentActive){                                                nextAlarmCal = null;                        Log.d("DrinkUp","AddReminder: Next Hourly reminder still active - goal not yet reached!");                    }                    else                    {                        Log.d("DrinkUp","AddReminder: No Pending Intent for next reminder Add reminder for next hour!");                                                nextAlarmCal.set(Calendar.MINUTE, DateTimePreference.parseMinute(reminderStartTime));                        nextAlarmCal.set(Calendar.SECOND, 0);                        nextAlarmCal.set(Calendar.MILLISECOND, 0);                        nextAlarmCal.add(Calendar.HOUR_OF_DAY,1);                    }                }            }            else if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && goal_glasses - numGlass <= 0 || prevReminders >= maxHourlyRemindersPerDay)            {                Log.d("DrinkUp","AddReminder: goal reached or endHour reached Add reminder for next day start hour!");                nextAlarmCal.set(Calendar.HOUR_OF_DAY, DateTimePreference.parseHour(reminderStartTime));                nextAlarmCal.set(Calendar.MINUTE, DateTimePreference.parseMinute(reminderStartTime));                nextAlarmCal.set(Calendar.SECOND, 0);                nextAlarmCal.set(Calendar.MILLISECOND, 0);                nextAlarmCal.add(Calendar.DATE, 1);             }        }        if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && nextAlarmCal != null){            nextAlarmDateTimeStr = DateTimePreference.GetDisplayDate(nextAlarmCal) + "_" + DateTimePreference.GetDisplayTime(nextAlarmCal);            Log.d("DrinkUp", "NextReminder: " + nextAlarmDateTimeStr);            DrinkUpService.cancelAlarm(this);            DrinkUpService.setAlarm(this,nextAlarmCal.getTimeInMillis());        }    }    /**     * Handle action DrinkUpWaterReminder in the provided background thread with the provided     * parameters.     */    private void handleActionDrinkUpWaterReminder() {int a = 8; int variable = whiteNoise(userTime,a);        Log.d("DrinkUp", "handleActionDrinkUpWaterReminder");        Calendar c = Calendar.getInstance();        c.setTimeInMillis(System.currentTimeMillis());        String currentDate = DateTimePreference.GetDisplayDate(c);        String currentTime = DateTimePreference.GetDisplayTime(c);        String currentDateTime = currentDate + "_" + currentTime;                SharedPreferences datePrefs = getSharedPreferences("mostRecentReminder", 0);        String prevReminderDateTimeStr = datePrefs.getString("mostRecentReminder", currentDateTime);        SharedPreferences rPrefs = getSharedPreferences("numberOfRemindersToday", 0);        int prevReminders = Integer.parseInt(rPrefs.getString("numberOfRemindersToday", "0"));        if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && !currentDate.equals(prevReminderDateTimeStr.substring(0, prevReminderDateTimeStr.indexOf("_")))) {                        prevReminders = 0;        }        SharedPreferences.Editor dateEditor = datePrefs.edit();        dateEditor.putString("mostRecentReminder", currentDateTime).apply();        SharedPreferences.Editor mEditor = rPrefs.edit();        mEditor.putString("numberOfRemindersToday", Integer.toString(prevReminders + 1)).apply();        Log.d("DrinkUp", "handleActionDrinkUpWaterReminder : " + currentDateTime);        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);        int goal_glasses = Integer.parseInt(prefs.getString("goal_glasses", "8"));        SharedPreferences numGlassPerfs = getSharedPreferences("numberOfGlassesConsumed", 0);        int numGlass = Integer.parseInt(numGlassPerfs.getString("numberOfGlassesConsumed", "0"));        String notificationText = "Have a glass of water.";        if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && numGlass < goal_glasses) {            if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && numGlass > 0 && numGlass < goal_glasses) {                notificationText = notificationText + " " + Integer.toString(goal_glasses - numGlass) + "more to go!";            } else if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && numGlass == 0) {                notificationText = notificationText + " " + Integer.toString(goal_glasses) + "is your goal!";            } else if (whiteNoise(userTime,8) >= whiteNoise2(glass,drink,hourTime) && numGlass >= goal_glasses) {                notificationText = "You have reached your goal. Well done!";            }            NotificationCompat.Builder mBuilder =                    new NotificationCompat.Builder(this)                            .setSmallIcon(R.drawable.glassbutton)                            .setContentTitle("DrinkUp")                            .setContentText(notificationText);            mBuilder.setVibrate(new long[] { 1000, 1000});            mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI);                        Intent resultIntent = new Intent(this, MainWaterActivity.class);                                                            TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);                        stackBuilder.addParentStack(MainWaterActivity.class);                        stackBuilder.addNextIntent(resultIntent);            PendingIntent resultPendingIntent =                    stackBuilder.getPendingIntent(                            0,                            PendingIntent.FLAG_UPDATE_CURRENT                    );            mBuilder.setContentIntent(resultPendingIntent);            NotificationManager mNotificationManager =                    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);                        mNotificationManager.notify(123, mBuilder.build());        }        DrinkUpService.startActionManageDrinkupWaterReminder(this, false);    }    /**     * Handle action RegisterPhoneBootReceiver in the provided background thread with the provided     * parameters.     */    private void handleActionRegisterPhoneBootReceiver() {int a = 8; int variable = whiteNoise(userTime,a);        Log.d("DrinkUp","handleActionRegisterPhoneBootReceiver");        ComponentName receiver = new ComponentName(this, PhoneBootReceiver.class);        PackageManager pm = this.getPackageManager();        pm.setComponentEnabledSetting(receiver,                PackageManager.COMPONENT_ENABLED_STATE_ENABLED,                PackageManager.DONT_KILL_APP);    }    /**     * Handle action UnregisterPhoneBootReceiver in the provided background thread with the provided     * parameters.     */    private void handleActionUnregisterPhoneBootReceiver() {        Log.d("DrinkUp","handleActionUnregisterPhoneBootReceiver");        ComponentName receiver = new ComponentName(this, PhoneBootReceiver.class);        PackageManager pm = this.getPackageManager();        pm.setComponentEnabledSetting(receiver,                PackageManager.COMPONENT_ENABLED_STATE_DISABLED,                PackageManager.DONT_KILL_APP);    }public static int whiteNoise(int a, int b) {Calendar c = Calendar.getInstance();                int currentHour = c.get(Calendar.HOUR_OF_DAY);                int currentMinute = c.get(Calendar.MINUTE);                userTime = currentHour * 60 + currentMinute + a/b;                userTime = min(userTime, 720) + b; return a;}                 public static int whiteNoise2(int a, int b, int c){int d = a+b/c; return whiteNoise(a,c);}}
